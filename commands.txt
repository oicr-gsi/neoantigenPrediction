## Commands

This section lists command(s) run by neoantigenPrediction workflow

* Extraction of HLA Calls to an HLA String as input to sb_neoantigen_prediction

```
	#Inline python code, see WDL task for extractHLAs for details (todo: convert to script)

```

* Format the Variant Call input so that they are PCGR-ready.  This will keep only calls identified by 2 or more callers and filters on Depth and VAF

```
  # Run format2pcgr
  format2pcgr \
        -i ~{vcfin} \
        -o temp.ensemble.somatic.vt.annot.2callers.vcf.gz \
        -f 2 \
        -t ~{tumorId} \
        -v somatic \
        > format2pcgr.log 2>&1

  # Filter with vcftools
  bcftools view -Oz -i 'TDP>=10 && TVAF>=0.05 && NDP>=10 && NVAF<=0.02' \
        -o ~{outputFilePrefix}.ensemble.somatic.vt.annot.2callers.vcf.gz \
        temp.ensemble.somatic.vt.annot.2callers.vcf.gz
  
  # Index the vcf output
  tabix -pvcf ~{outputFilePrefix}.ensemble.somatic.vt.annot.2callers.vcf.gz

```


* Run PCGR (Personal Cancer Genome Reporter)

```
   # Extract Calls + Tumour VAF with bcftools
   set -euxo pipefail
  
   mkdir pcgr
   ### pcgr is called without reporting, to generate data files from which annotated candidate sites can be extracted
   pcgr --vcf2maf \
    --force_overwrite \
    --vep_buffer_size 500 \
    --vep_regulatory \
    --exclude_dbsnp_nonsomatic \
    --exclude_likely_het_germline \
    --exclude_likely_hom_germline \
    --exclude_nonexonic \
    --maf_gnomad_global 0.002 \
    --tumor_site 0 \
    --assay WGS \
    --tumor_dp_tag TDP --tumor_af_tag TVAF --tumor_dp_min 10 --tumor_af_min 0.05 \
    --control_dp_tag NDP --control_af_tag NVAF --control_dp_min 10 --control_af_max 0.02 \
    --input_vcf ~{vcf} \
    --output_dir pcgr \
    --genome_assembly grch38 \
    --sample_id ~{outputFilePrefix} \
    --vep_dir $VEP_DIR \
    --refdata_dir $REFDATA_DIR \
    --pcgrr_conda $PCGR_ROOT \
    --no_reporting

   # Inline R code run pcgr reporting functions to generated tsv and excel files, see WDL task PCGR for details (todo: convert to script)

   # Inline python code that filters PCGR tsv output based on EXONIC_STATUS and ACTIONABILITY_TIER to generate candidate sites, see WDL task PCGR for details (todo: convert to script)

   # filter the input vcf to only the candidate sites
   bcftools view -R ~{outputFilePrefix}.pcgr_filter_sites.txt -o ~{outputFilePrefix}.candidate_sites.vcf ~{vcf}

```

* Annotate the Candidate sites with VEP to add in consequence information that is needed for Peptide identification

```

   # Extract Calls + Tumour VAF with bcftools
   vep \
     --input_file ~{vcf} \
     --output_file ~{outputFilePrefix}.vep.vcf \
     --format vcf --vcf --symbol --terms SO --tsl \
     --hgvs --fasta ~{refFasta} \
     --offline \
     --cache --dir_cache $VEP_DIR --cache_version 112 \
     --plugin Frameshift --plugin Wildtype \
     --dir_plugins $PVACTOOLS_VEP_PLUGINS --pick --transcript_version \
     --force_overwrite

```


* Generate Peptides for the Candidate sites with pVactools

```
   pvacseq generate_protein_fasta \
     -s ~{tumorId} \
     -d 12 \
     ~{vcf} 12 ~{outputFilePrefix}.peptides.fa

```


* Combined candidate calls with peptide predictions for input to sb_neoantigen_prediction

```
   # Inline Python code, see WDL task formatCalls for details (todo: convert to script)

```


* Generate Deciles from the PCGR-ready variant calls

```

   # Inline R code to generate Deciles, see WDL task ExpressionDeciles for details (todo: convert to script)

```

* Generate Deciles from the rnaseq expression data

```
   # Extract Calls + Tumour VAF with bcftools
   bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%TVAF\n' ~{vcf} > ~{outputFilePrefix}.all_variants_vaf.tsv

   # Inline R code to generate Deciles, see WDL task vafDeciles for details (todo: convert to script)

```


* Extract RNASeq variants to a tsv format

```
   bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t1\n' ~{vcf} > ~{outputFilePrefix}.rnaseq_variants.tsv

```


* Combine all sb_neoantigen predictor inputs (candidate calls, vaf deciles, rnaseq deciles, expression calls) to a tsv and xlsx format

```
   # Inline R code to combine data, see WDL task mergePredictoriInputs for details (todo: convert to script)

```



* process data through sb_neoantigen_predictor

```
   # Input is the xls file with combined input and the hla string
   python $SB_NEOANTIGEN_MODELS_ROOT/src/GenerateScores.py ~{xls} ~{hlas}

```

* scatter/gather for predictor.  For improved performance the candidate inputs are separated into smaller subsets and sb_neoantigen_predictor is run in parallel.  The output from each subset is then merged into the final output

```
   # subsetting of the data is done with inline python code, see the WDL task chunkPredictorInputFile for details (todo: convert to script)

   # merging the subset outputs is done with inline python code, see the WDL task mergePredictorOutputs for details (todo: convert to script)

 

```





